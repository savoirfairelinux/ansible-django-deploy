# GENERAL
# ------------------------------------------------------------------------------

# Name used as a default value in most variables below
django_name: django

# Root path of the django project
django_path: "/opt/{{ django_name }}"

# Path of the virtualenv where we install python dependencies
django_env: "{{ django_path }}/env"
# Path where the source of the project is placed.
django_project_path: "{{ django_path }}/project"
# Path, inside the project's source, where "manage.py" lives.
django_src_path: "{{ django_project_path }}/src"

# python executable name. re-used in other variables below
django_python2exec: python2.7
django_python3exec: python3.5
django_pythonexec: "{{ django_ispython3 | ternary(django_python3exec, django_python2exec) }}"
# Path for the site-packages folder inside the virtualenv (you normally don't have to change this
# unless it's the wrong path). This is where we go place the "local_settings.py" file.
django_sitepackages_path: "{{ django_env }}/lib/{{ django_pythonexec }}/site-packages"

# Path for STATIC_ROOT
django_static_path: "{{ django_path }}/static"
# Path for MEDIA_ROOT
django_media_path: "{{ django_path }}/media"

# Path to a requirements file. This is what will be installed inside our virtualenv.
django_requirements_file: "{{ django_project_path }}/requirements.txt"

# Owner of django_path. Most commands in this role are ran under this user.
# Will be created if it doesn't exist.
django_user: "{{ django_name }}"

# Sets the "touch-reload" uwsgi option. This path, whenever it's touched, will cause the WSGI server
# process to reload itself so that changed python code is properly reloaded.
# The default path is the project directory because its mtime is generally updated each time we
# checkout a new commit, which is the appropriate time for a reload.
# You can set to "" to disable touch-reload.
django_touch_reload_path: "{{ django_project_path }}"

# Group owning the static/media directories. This can be needed to allow a specific server (eg. nginx)
# to access to these directories.
django_files_group: "www-data"

# django_env_variables can be used to define some environment variables that should be set before
# running the Django application. For example:
#
# django_env_variables:
#   - name: DJANGO_SETTINGS_MODULE
#     value: myproject.settings
#
django_env_variables: {}


# DATABASE CONFIGURATION
# ------------------------------------------------------------------------------

# Type of database to install. Choices: postgres, mariadb.
django_dbtype: postgres

# User to use for db connection.
django_dbuser: "{{ django_user }}"

# DB name to use.
django_dbname: "{{ django_name }}"

# password to use for db connection.
django_dbpass: whatever


# DJANGO SETTINGS CONFIGURATION
# ------------------------------------------------------------------------------

# Defines the type of settings used by the Django project.
# The allowed values are 'localsettings', 'jsonsettings' or 'none'.
#
# - 'localsettings' results in the creation of a local_settings.py file that should be imported in
#    the project's main settings.py file. Although this is not the preferred pattern, it remains the
#    default behaviour (for now...).
# - 'jsonsettings' results in the creation of an .env.json file containing properties that are
#    injected into the project's setting module using a syntax like "get_envsetting('SECRET_KEY')".
#    This has the advantage over the previous technique that the environment-specific settings are
#    explicitely defined into the settings module.
# - 'none' just do nothing...
django_settings_pattern: 'localsettings'

# Whether we run django in debug mode.
django_debug: no
# Ends up in SECRET_KEY setting.
django_secret_key: whatever
# Value of the ENGINE param in Django settings' DATABASES dictionary.
django_dbengine_name: "django.db.backends.{{ (django_dbtype == 'postgres') | ternary('postgresql_psycopg2', 'mysql') }}"
# Domain names under which the project is served. Ends up in ALLOWED_HOSTS.
django_domain_name: "{{ django_name }}.vagrant.dev"
django_extra_domain_names: []
# Arbitrary python code to add to local_settings.py. Will be appended as-is to the end of the file.
django_env_settings_extra: ''

django_assets_script: ''

# The django_jsonsettings_properties is only used when django_settings_pattern is set to
# "jsonsettings". It must be a dictionary of key/values that should be injected into the project's
# settings module using the "get_envsetting('SECRET_KEY')" pattern.
django_jsonsettings_properties:
  SECRET_KEY: "{{ django_secret_key }}"
  ADMIN_URL: admin/
  DB_ENGINE: "{{ django_dbengine_name }}"
  DB_NAME: "{{ django_dbname }}"
  DB_USER: "{{ django_dbuser }}"
  DB_PASSWORD: "{{ django_dbpass }}"
  DB_HOST: ""
  DB_PORT: ""
  DB_OPTIONS: {}
  ALLOWED_HOSTS: "['{{ django_domain_name }}', ] + {{ django_extra_domain_names|default([]) }}"
